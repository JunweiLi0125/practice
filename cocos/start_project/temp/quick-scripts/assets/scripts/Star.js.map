{"version":3,"sources":["Star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","game","default","serializable","onLoad","getPlayerDistance","playerPos","player","getPosition","dist","pDistance","node","position","onPicked","spawnNewStar","gainScore","destroy","start","update","dt"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACAC,oBAAY,CAFJ;AAGR;AACAC,cAAM;AACFC,qBAAS,IADP;AAEFC,0BAAc;AAFZ;AAJE,KAHP;;AAaL;;AAEAC,UAfK,oBAeK,CAAE,CAfP;;;AAiBLC,uBAAmB,6BAAY;AAC3B;AACA,YAAIC,YAAY,KAAKL,IAAL,CAAUM,MAAV,CAAiBC,WAAjB,EAAhB;AACA;AACA,YAAIC,OAAOd,GAAGe,SAAH,CAAa,KAAKC,IAAL,CAAUC,QAAvB,EAAiCN,SAAjC,CAAX;AACA,eAAOG,IAAP;AACH,KAvBI;;AAyBLI,cAAU,oBAAW;AACjB;AACA,aAAKZ,IAAL,CAAUa,YAAV;AACA;AACA,aAAKb,IAAL,CAAUc,SAAV;AACA;AACA,aAAKJ,IAAL,CAAUK,OAAV;AACH,KAhCI;;AAkCLC,SAlCK,mBAkCI,CAER,CApCI;;;AAsCLC,YAAQ,gBAAUC,EAAV,EAAc;AAClB;AACA,YAAI,KAAKd,iBAAL,KAA2B,KAAKL,UAApC,EAAgD;AAC5C;AACA,iBAAKa,QAAL;AACA;AACH;AACJ;AA7CI,CAAT","file":"Star.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // When the distance between the star and main character is less than this value, collection of the point will be completed\n        pickRadius: 0,\n        // The game object\n        game: {\n            default: null,\n            serializable: false\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {},\n\n    getPlayerDistance: function () {\n        // judge the distance according to the position of the player node\n        var playerPos = this.game.player.getPosition();\n        // calculate the distance between two nodes according to their positions\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function() {\n        // When the stars are being collected, invoke the interface in the Game script to generate a new star\n        this.game.spawnNewStar();\n        // invoke the scoring method of the Game script\n        this.game.gainScore();\n        // then destroy the current star's node\n        this.node.destroy();\n    },\n\n    start () {\n\n    },\n\n    update: function (dt) {\n        // judge if the distance between the star and main character is shorter than the collecting distance for each frame\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // invoke collecting behavior\n            this.onPicked();\n            return;\n        }\n    },\n});\n"]}